
library(magrittr)

#' Change a function's default parameters
#'
#' @param fun A function,
#' @param ... Named values, accepts injection.
#' @param envir Where to start looking the old function with the
#' default default parameters.
#'
#' @details If you overwrite a function, you won't be able to retrieve the old
#' defaults. You can save them before overwriting by using \link{formals}
#'
#' @return The modified function.
#' @export
#'
#' @examples
#' use_names <- FALSE
#' diag <- set_defaults(diag, nrow = 3, ncol = nrow / 2, names = !!use_names)
#' old_diag <- reset_defaults(diag)
set_defaults <- function(fun, ..., reassign = TRUE, envir = globalenv(),
                         warn = TRUE) {

    require(rlang)
    fun_name <- as.character(enexpr(fun))
    fun <- match.fun(fun)
    dots <- enexprs(...)
    nams <- names(dots)
    old_formals <- formals(fun)

    if (any(is.null(nams))) {
        stop("New default values must be named with their respective arguments.")
    }

    for (k in 1:length(dots)) {
        if (warn && !(nams[k] %in% names(old_formals))) {
            warning("{", nams[k],
                    "} is not a formal argument of the function {",
                    fun_name, "}")
        }
        formals(fun)[[nams[k]]] <- dots[[k]]
    }

    if (attr(fun, "old_formals") %>% is.null()) {
        attr(fun, "old_formals") <- old_formals
    }

    if (reassign) {
        assign(fun_name, value = fun, envir = envir)
    }

    invisible(fun)
}

#' @rdname set_defaults
#' @export
reset_defaults <- function(fun, envir = parent.env(globalenv()),
                           reassign = TRUE, reassign_envir = globalenv()) {

    fun_name <- as.character(substitute(fun))
    if (exists(fun_name, envir = parent.frame(), inherits = FALSE)
        && exists(fun_name, envir = envir)) {
        rm(list = fun_name, envir = parent.frame())
        return(invisible(fun))

    } else if (!is.null(attr(fun, "old_formals"))) {
        formals(fun) <- attr(fun, "old_formals")
        attr(fun, "old_formals") <- NULL

    } else {
        fun_call <- call("match.fun", fun_name)
        fun <- eval(fun_call, envir = envir)
    }

    if (reassign) {
        assign(fun_name, value = fun, envir = reassign_envir)
    }

    invisible(fun)
}

#' Save a plot as a png
#'
#' @param p Either a ggplot object or an expression that plots something.
#' @param filename The name of the file where the plot will be saved.
#' @param asp Aspect ratio of the plot.
#' @param quality Quality of the image. Does not affect size of elements relative
#' to the plot size.
#' @param visual_size Visual size of plot elements like text, line width...
#' @param plot_it Whether to plot it in the active graphical device after connection
#' with .png file is closed.
#'
#' @export
write_png <- function(p, filename, asp = 16/9, quality = 2.5, visual_size = 1,
                      plot_it = TRUE) {

    if (stringr::str_detect(filename, "\\.png$")) {
        filename <- paste0(filename, ".png")
    }

    png(filename = filename,
        height = 480 * quality, width = 480 * quality * asp,
        res = 72 * quality * visual_size)
    eval(enexpr(p))
    dev.off()

    if (plot_it) eval(enexpr(p))
}

#' Replace matching values with respective counterparts
#'
#' @param x The vector to be translated.
#' @param old Old values to be replaced.
#' @param new Replacement for the old values.
#'
#' @return The translated vector.
#' @export
translate <- function(x, old, new) {
    matches <- match(x, old)
    for (k in which(!is.na(matches))) {
        x[k] <- new[matches[k]]
    }
    x
}


#' Use the keyword 'self' when assigning. Similar to magrittr %<>%
#'
#' @param x Assigned to. 'self' gets it's value from this.
#' @param expr Expression using 'self'
#' @param .selfname Keyword to use, 'self' by default.

#' @export
#'
#' @examples
#' long_name_variable <- list(some_words = c("Hello", "Self!"))
#'
selfify <- function(x, expr, .selfname = "self") {
    Self_Variable <- substitute(x)

    if (identical(Self_Variable, as.symbol("."))) {
        stop("Pipe not implemented yet.")
    }

    assign(.selfname, eval(Self_Variable))
    value <- substitute(expr, env = environment()) %>% eval()
    call("<-", Self_Variable, value) %>% eval.parent(2)
}


#' Split a string while keeping the pattern.
#'
#' @param string The string to split.
#' @param pattern Pattern to split with.
#' @param where Where to attach pattern. Can be 'left', 'right' or 'middle',
#' which will keep the pattern as a separate string.
#'
#' @return A list of character vectors.
#' @export
str_split_keep <- function(string, pattern, where = "left") {

    require(stringr)
    fix <- switch(where,
        "left" = function(x) {
            x[, 2]
        },
        "right" = function(x) {
            x[, 1] - 1
        },
        "middle" = function(x) {
            x[, 1] %<>% subtract(1)
            c(t(x))
        },
        stop("{where} must be 'left','right' or middle")
    )
    pos <- str_locate_all(string, pattern) %>% lapply(fix)

    mapply(string, pos, SIMPLIFY = FALSE, FUN = function(str, p) {
        pstart <- c(1, p + 1)
        pend   <- c(p, nchar(str))
        str_sub(str, pstart, pend)
    })
}

#' Replace matches in a string with a transformed match.
#'
#' @param string A character vector.
#' @param pattern Pattern to match against.
#' @param fun Function to transform matches.
#'
#' @return The transformed string.
#' @export
str_replace_fun <- Vectorize(function(string, pattern, fun) {

    require(stringr)
    str_locate_all(string, pattern)[[1]] %>% apply(1, function(p) {
        str_sub(string, p[1], p[2]) %<>% fun()
    })

    string

}, vectorize.args = c("string", "pattern"))



#' Stack an array or dataframe by replicating it.
#'
#' @param x Array object.
#' @param margin Whether to stack by "rows", "cols" or both, c("rows", "cols").
#' Also accepts abbreviations, and 1 (rows) or 2 (cols).
#'
#' @return Object of the same class as x.
#' @export
rep_array <- function(x, times = 1, each = 1, margin = "rows") {

    if (!is.numeric(margin)) {
        margin <- margin %>% trimws() %>% tolower() %>%
            pmatch(c("rows", "cols"))
    }
    if (1 %in% margin) {
        x <- x[rep(1:nrow(x), times = times, each = each), ]
    }
    if (2 %in% margin) {
        x <- x[, rep(1:ncol(x), times = times, each = each)]
    }

    x
}






